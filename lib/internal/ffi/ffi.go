// Package ffi provides information about the platform-native C ABI types.
package ffi

import (
	"fmt"
	"reflect"
	"unsafe"
)

// Sizeof returns 0 if the type is not supported.
func Sizeof(name string) uintptr {
	switch name {
	case "char":
		return unsafe.Sizeof(c_char(0))
	case "signed_char":
		return unsafe.Sizeof(c_signed_char(0))
	case "unsigned_char":
		return unsafe.Sizeof(c_unsigned_char(0))
	case "short":
		return unsafe.Sizeof(c_short(0))
	case "unsigned_short":
		return unsafe.Sizeof(c_unsigned_short(0))
	case "int":
		return unsafe.Sizeof(c_int(0))
	case "unsigned_int":
		return unsafe.Sizeof(c_unsigned_int(0))
	case "long":
		return unsafe.Sizeof(c_long(0))
	case "unsigned_long":
		return unsafe.Sizeof(c_unsigned_long(0))
	case "longlong":
		return unsafe.Sizeof(c_longlong(0))
	case "unsigned_longlong":
		return unsafe.Sizeof(c_unsigned_longlong(0))
	case "float":
		return unsafe.Sizeof(c_float(0))
	case "double":
		return unsafe.Sizeof(c_double(0))
	case "long_double":
		return unsafe.Sizeof(c_long_double(0))
	case "float_t":
		return unsafe.Sizeof(c_float_t(0))
	case "double_t":
		return unsafe.Sizeof(c_double_t(0))
	case "int8_t":
		return unsafe.Sizeof(c_int8_t(0))
	case "int16_t":
		return unsafe.Sizeof(c_int16_t(0))
	case "int32_t":
		return unsafe.Sizeof(c_int32_t(0))
	case "int64_t":
		return unsafe.Sizeof(c_int64_t(0))
	case "uint8_t":
		return unsafe.Sizeof(c_uint8_t(0))
	case "uint16_t":
		return unsafe.Sizeof(c_uint16_t(0))
	case "uint32_t":
		return unsafe.Sizeof(c_uint32_t(0))
	case "uint64_t":
		return unsafe.Sizeof(c_uint64_t(0))
	case "char16_t":
		return unsafe.Sizeof(c_char16_t(0))
	case "char32_t":
		return unsafe.Sizeof(c_char32_t(0))
	case "wchar_t":
		return unsafe.Sizeof(c_wchar_t(0))
	case "wint_t":
		return unsafe.Sizeof(c_wint_t(0))
	case "size_t":
		return unsafe.Sizeof(c_size_t(0))
	case "time_t":
		return unsafe.Sizeof(c_time_t(0))
	case "clock_t":
		return unsafe.Sizeof(c_clock_t(0))
	case "bool":
		return unsafe.Sizeof(c_bool(0))
	case "uintptr_t":
		return unsafe.Sizeof(c_uintptr_t(0))
	case "ptrdiff_t":
		return unsafe.Sizeof(c_ptrdiff_t(0))
	case "intptr_t":
		return unsafe.Sizeof(c_intptr_t(0))
	case "max_align_t":
		var maxalign c_max_align_t
		return unsafe.Sizeof(maxalign)
	case "sig_atomic_t":
		return unsafe.Sizeof(c_sig_atomic_t(0))
	case "intmax_t":
		return unsafe.Sizeof(c_intmax_t(0))
	case "uintmax_t":
		return unsafe.Sizeof(c_uintmax_t(0))
	case "int_fast8_t":
		return unsafe.Sizeof(c_int_fast8_t(0))
	case "int_fast16_t":
		return unsafe.Sizeof(c_int_fast16_t(0))
	case "int_fast32_t":
		return unsafe.Sizeof(c_int_fast32_t(0))
	case "int_fast64_t":
		return unsafe.Sizeof(c_int_fast64_t(0))
	case "uint_fast8_t":
		return unsafe.Sizeof(c_uint_fast8_t(0))
	case "uint_fast16_t":
		return unsafe.Sizeof(c_uint_fast16_t(0))
	case "uint_fast32_t":
		return unsafe.Sizeof(c_uint_fast32_t(0))
	case "uint_fast64_t":
		return unsafe.Sizeof(c_uint_fast64_t(0))
	case "int_least8_t":
		return unsafe.Sizeof(c_int_least8_t(0))
	case "int_least16_t":
		return unsafe.Sizeof(c_int_least16_t(0))
	case "int_least32_t":
		return unsafe.Sizeof(c_int_least32_t(0))
	case "int_least64_t":
		return unsafe.Sizeof(c_int_least64_t(0))
	case "uint_least8_t":
		return unsafe.Sizeof(c_uint_least8_t(0))
	case "uint_least16_t":
		return unsafe.Sizeof(c_uint_least16_t(0))
	case "uint_least32_t":
		return unsafe.Sizeof(c_uint_least32_t(0))
	case "uint_least64_t":
		return unsafe.Sizeof(c_uint_least64_t(0))
	default:
		return 0
	}
}

// Kind returns [reflect.Invalid] if the type is not supported.
func Kind(name string) reflect.Kind {
	switch name {
	case "char":
		return reflect.TypeOf(c_char(0)).Kind()
	case "signed_char":
		return reflect.TypeOf(c_signed_char(0)).Kind()
	case "unsigned_char":
		return reflect.TypeOf(c_unsigned_char(0)).Kind()
	case "short":
		return reflect.TypeOf(c_short(0)).Kind()
	case "unsigned_short":
		return reflect.TypeOf(c_unsigned_short(0)).Kind()
	case "int":
		return reflect.TypeOf(c_int(0)).Kind()
	case "unsigned_int":
		return reflect.TypeOf(c_unsigned_int(0)).Kind()
	case "long":
		return reflect.TypeOf(c_long(0)).Kind()
	case "unsigned_long":
		return reflect.TypeOf(c_unsigned_long(0)).Kind()
	case "longlong":
		return reflect.TypeOf(c_longlong(0)).Kind()
	case "unsigned_longlong":
		return reflect.TypeOf(c_unsigned_longlong(0)).Kind()
	case "float":
		return reflect.TypeOf(c_float(0)).Kind()
	case "double":
		return reflect.TypeOf(c_double(0)).Kind()
	case "long_double":
		return reflect.TypeOf(c_long_double(0)).Kind()
	case "float_t":
		return reflect.TypeOf(c_float_t(0)).Kind()
	case "double_t":
		return reflect.TypeOf(c_double_t(0)).Kind()
	case "int8_t":
		return reflect.TypeOf(c_int8_t(0)).Kind()
	case "int16_t":
		return reflect.TypeOf(c_int16_t(0)).Kind()
	case "int32_t":
		return reflect.TypeOf(c_int32_t(0)).Kind()
	case "int64_t":
		return reflect.TypeOf(c_int64_t(0)).Kind()
	case "uint8_t":
		return reflect.TypeOf(c_uint8_t(0)).Kind()
	case "uint16_t":
		return reflect.TypeOf(c_uint16_t(0)).Kind()
	case "uint32_t":
		return reflect.TypeOf(c_uint32_t(0)).Kind()
	case "uint64_t":
		return reflect.TypeOf(c_uint64_t(0)).Kind()
	case "char16_t":
		return reflect.TypeOf(c_char16_t(0)).Kind()
	case "char32_t":
		return reflect.TypeOf(c_char32_t(0)).Kind()
	case "wchar_t":
		return reflect.TypeOf(c_wchar_t(0)).Kind()
	case "wint_t":
		return reflect.TypeOf(c_wint_t(0)).Kind()
	case "size_t":
		return reflect.TypeOf(c_size_t(0)).Kind()
	case "time_t":
		return reflect.TypeOf(c_time_t(0)).Kind()
	case "clock_t":
		return reflect.TypeOf(c_clock_t(0)).Kind()
	case "bool":
		return reflect.TypeOf(c_bool(0)).Kind()
	case "uintptr_t":
		return reflect.TypeOf(c_uintptr_t(0)).Kind()
	case "ptrdiff_t":
		return reflect.TypeOf(c_ptrdiff_t(0)).Kind()
	case "intptr_t":
		return reflect.TypeOf(c_intptr_t(0)).Kind()
	case "max_align_t":
		var maxalign c_max_align_t
		return reflect.TypeOf(maxalign).Kind()
	case "sig_atomic_t":
		return reflect.TypeOf(c_sig_atomic_t(0)).Kind()
	case "intmax_t":
		return reflect.TypeOf(c_intmax_t(0)).Kind()
	case "uintmax_t":
		return reflect.TypeOf(c_uintmax_t(0)).Kind()
	case "int_fast8_t":
		return reflect.TypeOf(c_int_fast8_t(0)).Kind()
	case "int_fast16_t":
		return reflect.TypeOf(c_int_fast16_t(0)).Kind()
	case "int_fast32_t":
		return reflect.TypeOf(c_int_fast32_t(0)).Kind()
	case "int_fast64_t":
		return reflect.TypeOf(c_int_fast64_t(0)).Kind()
	case "uint_fast8_t":
		return reflect.TypeOf(c_uint_fast8_t(0)).Kind()
	case "uint_fast16_t":
		return reflect.TypeOf(c_uint_fast16_t(0)).Kind()
	case "uint_fast32_t":
		return reflect.TypeOf(c_uint_fast32_t(0)).Kind()
	case "uint_fast64_t":
		return reflect.TypeOf(c_uint_fast64_t(0)).Kind()
	case "int_least8_t":
		return reflect.TypeOf(c_int_least8_t(0)).Kind()
	case "int_least16_t":
		return reflect.TypeOf(c_int_least16_t(0)).Kind()
	case "int_least32_t":
		return reflect.TypeOf(c_int_least32_t(0)).Kind()
	case "int_least64_t":
		return reflect.TypeOf(c_int_least64_t(0)).Kind()
	case "uint_least8_t":
		return reflect.TypeOf(c_uint_least8_t(0)).Kind()
	case "uint_least16_t":
		return reflect.TypeOf(c_uint_least16_t(0)).Kind()
	case "uint_least32_t":
		return reflect.TypeOf(c_uint_least32_t(0)).Kind()
	case "uint_least64_t":
		return reflect.TypeOf(c_uint_least64_t(0)).Kind()
	default:
		return reflect.Invalid
	}
}

// Const returns an empty string if the constant is not supported.
func Const(name string) string {
	switch name {
	case "CHAR_BIT":
		return fmt.Sprint(c_CHAR_BIT)
	case "MB_LEN_MAX":
		return fmt.Sprint(c_MB_LEN_MAX)
	case "CHAR_MIN":
		return fmt.Sprint(c_CHAR_MIN)
	case "CHAR_MAX":
		return fmt.Sprint(c_CHAR_MAX)
	case "SCHAR_MIN":
		return fmt.Sprint(c_SCHAR_MIN)
	case "SHRT_MIN":
		return fmt.Sprint(c_SHRT_MIN)
	case "INT_MIN":
		return fmt.Sprint(c_INT_MIN)
	case "LONG_MIN":
		return fmt.Sprint(c_LONG_MIN)
	case "LLONG_MIN":
		return fmt.Sprint(c_LLONG_MIN)
	case "SCHAR_MAX":
		return fmt.Sprint(c_SCHAR_MAX)
	case "SHRT_MAX":
		return fmt.Sprint(c_SHRT_MAX)
	case "INT_MAX":
		return fmt.Sprint(c_INT_MAX)
	case "LONG_MAX":
		return fmt.Sprint(c_LONG_MAX)
	case "LLONG_MAX":
		return fmt.Sprint(c_LLONG_MAX)
	case "UCHAR_MAX":
		return fmt.Sprint(c_UCHAR_MAX)
	case "USHRT_MAX":
		return fmt.Sprint(c_USHRT_MAX)
	case "UINT_MAX":
		return fmt.Sprint(c_UINT_MAX)
	case "ULONG_MAX":
		return fmt.Sprint(uint64(c_ULONG_MAX))
	case "ULLONG_MAX":
		return fmt.Sprint(uint64(c_ULLONG_MAX))
	case "PTRDIFF_MIN":
		return fmt.Sprint(c_PTRDIFF_MIN)
	case "PTRDIFF_MAX":
		return fmt.Sprint(c_PTRDIFF_MAX)
	case "SIZE_MAX":
		return fmt.Sprint(uint64(c_SIZE_MAX))
	case "WINT_MIN":
		return fmt.Sprint(c_WINT_MIN)
	case "WINT_MAX":
		return fmt.Sprint(c_WINT_MAX)
	case "WCHAR_MIN":
		return fmt.Sprint(c_WCHAR_MIN)
	case "WCHAR_MAX":
		return fmt.Sprint(c_WCHAR_MAX)
	case "INT8_MIN":
		return fmt.Sprint(c_INT8_MIN)
	case "INT16_MIN":
		return fmt.Sprint(c_INT16_MIN)
	case "INT32_MIN":
		return fmt.Sprint(c_INT32_MIN)
	case "INT64_MIN":
		return fmt.Sprint(c_INT64_MIN)
	case "INT8_MAX":
		return fmt.Sprint(c_INT8_MAX)
	case "INT16_MAX":
		return fmt.Sprint(c_INT16_MAX)
	case "INT32_MAX":
		return fmt.Sprint(c_INT32_MAX)
	case "INT64_MAX":
		return fmt.Sprint(c_INT64_MAX)
	case "UINT8_MAX":
		return fmt.Sprint(c_UINT8_MAX)
	case "UINT16_MAX":
		return fmt.Sprint(c_UINT16_MAX)
	case "UINT32_MAX":
		return fmt.Sprint(c_UINT32_MAX)
	case "UINT64_MAX":
		return fmt.Sprint(uint64(c_UINT64_MAX))
	case "INT_FAST8_MIN":
		return fmt.Sprint(c_INT_FAST8_MIN)
	case "INT_FAST16_MIN":
		return fmt.Sprint(c_INT_FAST16_MIN)
	case "INT_FAST32_MIN":
		return fmt.Sprint(c_INT_FAST32_MIN)
	case "INT_FAST64_MIN":
		return fmt.Sprint(c_INT_FAST64_MIN)
	case "INT_FAST8_MAX":
		return fmt.Sprint(c_INT_FAST8_MAX)
	case "INT_FAST16_MAX":
		return fmt.Sprint(c_INT_FAST16_MAX)
	case "INT_FAST32_MAX":
		return fmt.Sprint(c_INT_FAST32_MAX)
	case "INT_FAST64_MAX":
		return fmt.Sprint(c_INT_FAST64_MAX)
	case "UINT_FAST8_MAX":
		return fmt.Sprint(c_UINT_FAST8_MAX)
	case "UINT_FAST16_MAX":
		return fmt.Sprint(uint64(c_UINT_FAST16_MAX))
	case "UINT_FAST32_MAX":
		return fmt.Sprint(uint64(c_UINT_FAST32_MAX))
	case "UINT_FAST64_MAX":
		return fmt.Sprint(uint64(c_UINT_FAST64_MAX))
	case "INT_LEAST8_MIN":
		return fmt.Sprint(c_INT_LEAST8_MIN)
	case "INT_LEAST16_MIN":
		return fmt.Sprint(c_INT_LEAST16_MIN)
	case "INT_LEAST32_MIN":
		return fmt.Sprint(c_INT_LEAST32_MIN)
	case "INT_LEAST64_MIN":
		return fmt.Sprint(c_INT_LEAST64_MIN)
	case "INT_LEAST8_MAX":
		return fmt.Sprint(c_INT_LEAST8_MAX)
	case "INT_LEAST16_MAX":
		return fmt.Sprint(c_INT_LEAST16_MAX)
	case "INT_LEAST32_MAX":
		return fmt.Sprint(c_INT_LEAST32_MAX)
	case "INT_LEAST64_MAX":
		return fmt.Sprint(c_INT_LEAST64_MAX)
	case "UINT_LEAST8_MAX":
		return fmt.Sprint(c_UINT_LEAST8_MAX)
	case "UINT_LEAST16_MAX":
		return fmt.Sprint(c_UINT_LEAST16_MAX)
	case "UINT_LEAST32_MAX":
		return fmt.Sprint(c_UINT_LEAST32_MAX)
	case "UINT_LEAST64_MAX":
		return fmt.Sprint(uint64(c_UINT_LEAST64_MAX))
	case "INTMAX_MIN":
		return fmt.Sprint(c_INTMAX_MIN)
	case "INTMAX_MAX":
		return fmt.Sprint(c_INTMAX_MAX)
	case "UINTMAX_MAX":
		return fmt.Sprint(uint64(c_UINTMAX_MAX))
	case "INTPTR_MIN":
		return fmt.Sprint(c_INTPTR_MIN)
	case "INTPTR_MAX":
		return fmt.Sprint(c_INTPTR_MAX)
	case "UINTPTR_MAX":
		return fmt.Sprint(uint64(c_UINTPTR_MAX))
	case "SIG_ATOMIC_MIN":
		return fmt.Sprint(c_SIG_ATOMIC_MIN)
	case "SIG_ATOMIC_MAX":
		return fmt.Sprint(c_SIG_ATOMIC_MAX)
	case "FLT_RADIX":
		return fmt.Sprint(c_FLT_RADIX)
	case "DECIMAL_DIG":
		return fmt.Sprint(c_DECIMAL_DIG)
	case "FLT_DECIMAL_DIG":
		return fmt.Sprint(c_FLT_DECIMAL_DIG)
	case "DBL_DECIMAL_DIG":
		return fmt.Sprint(c_DBL_DECIMAL_DIG)
	case "LDBL_DECIMAL_DIG":
		return fmt.Sprint(c_LDBL_DECIMAL_DIG)
	case "FLT_MIN":
		return fmt.Sprint(c_FLT_MIN)
	case "DBL_MIN":
		return fmt.Sprint(c_DBL_MIN)
	case "LDBL_MIN":
		return fmt.Sprint(c_LDBL_MIN)
	case "FLT_TRUE_MIN":
		return fmt.Sprint(c_FLT_TRUE_MIN)
	case "DBL_TRUE_MIN":
		return fmt.Sprint(c_DBL_TRUE_MIN)
	case "LDBL_TRUE_MIN":
		return fmt.Sprint(c_LDBL_TRUE_MIN)
	case "FLT_MAX":
		return fmt.Sprint(c_FLT_MAX)
	case "DBL_MAX":
		return fmt.Sprint(c_DBL_MAX)
	case "LDBL_MAX":
		return "" // too big
	case "FLT_EPSILON":
		return fmt.Sprint(c_FLT_EPSILON)
	case "DBL_EPSILON":
		return fmt.Sprint(c_DBL_EPSILON)
	case "LDBL_EPSILON":
		return fmt.Sprint(c_LDBL_EPSILON)
	case "FLT_DIG":
		return fmt.Sprint(c_FLT_DIG)
	case "DBL_DIG":
		return fmt.Sprint(c_DBL_DIG)
	case "LDBL_DIG":
		return fmt.Sprint(c_LDBL_DIG)
	case "FLT_MANT_DIG":
		return fmt.Sprint(c_FLT_MANT_DIG)
	case "DBL_MANT_DIG":
		return fmt.Sprint(c_DBL_MANT_DIG)
	case "LDBL_MANT_DIG":
		return fmt.Sprint(c_LDBL_MANT_DIG)
	case "FLT_MIN_EXP":
		return fmt.Sprint(c_FLT_MIN_EXP)
	case "DBL_MIN_EXP":
		return fmt.Sprint(c_DBL_MIN_EXP)
	case "LDBL_MIN_EXP":
		return fmt.Sprint(c_LDBL_MIN_EXP)
	case "FLT_MIN_10_EXP":
		return fmt.Sprint(c_FLT_MIN_10_EXP)
	case "DBL_MIN_10_EXP":
		return fmt.Sprint(c_DBL_MIN_10_EXP)
	case "LDBL_MIN_10_EXP":
		return fmt.Sprint(c_LDBL_MIN_10_EXP)
	case "FLT_MAX_EXP":
		return fmt.Sprint(c_FLT_MAX_EXP)
	case "DBL_MAX_EXP":
		return fmt.Sprint(c_DBL_MAX_EXP)
	case "LDBL_MAX_EXP":
		return fmt.Sprint(c_LDBL_MAX_EXP)
	case "FLT_MAX_10_EXP":
		return fmt.Sprint(c_FLT_MAX_10_EXP)
	case "DBL_MAX_10_EXP":
		return fmt.Sprint(c_DBL_MAX_10_EXP)
	case "LDBL_MAX_10_EXP":
		return fmt.Sprint(c_LDBL_MAX_10_EXP)
	case "FLT_ROUNDS":
		return fmt.Sprint(c_FLT_ROUNDS)
	case "FLT_EVAL_METHOD":
		return fmt.Sprint(c_FLT_EVAL_METHOD)
	case "FLT_HAS_SUBNORM":
		return fmt.Sprint(c_FLT_HAS_SUBNORM)
	case "DBL_HAS_SUBNORM":
		return fmt.Sprint(c_DBL_HAS_SUBNORM)
	case "LDBL_HAS_SUBNORM":
		return fmt.Sprint(c_LDBL_HAS_SUBNORM)
	case "EDOM":
		return fmt.Sprint(c_EDOM)
	case "ERANGE":
		return fmt.Sprint(c_ERANGE)
	case "EILSEQ":
		return fmt.Sprint(c_EILSEQ)
	case "FE_DFL_ENV":
		return fmt.Sprint(c_FE_DFL_ENV)
	case "FE_DIVBYZERO":
		return fmt.Sprint(c_FE_DIVBYZERO)
	case "FE_INEXACT":
		return fmt.Sprint(c_FE_INEXACT)
	case "FE_INVALID":
		return fmt.Sprint(c_FE_INVALID)
	case "FE_OVERFLOW":
		return fmt.Sprint(c_FE_OVERFLOW)
	case "FE_UNDERFLOW":
		return fmt.Sprint(c_FE_UNDERFLOW)
	case "FE_ALL_EXCEPT":
		return fmt.Sprint(c_FE_ALL_EXCEPT)
	case "fegetround":
		return fmt.Sprint(c_fegetround)
	case "FE_DOWNWARD":
		return fmt.Sprint(c_FE_DOWNWARD)
	case "FE_TONEAREST":
		return fmt.Sprint(c_FE_TONEAREST)
	case "FE_TOWARDZERO":
		return fmt.Sprint(c_FE_TOWARDZERO)
	case "FE_UPWARD":
		return fmt.Sprint(c_FE_UPWARD)
	case "FP_NORMAL":
		return fmt.Sprint(c_FP_NORMAL)
	case "FP_SUBNORMAL":
		return fmt.Sprint(c_FP_SUBNORMAL)
	case "FP_ZERO":
		return fmt.Sprint(c_FP_ZERO)
	case "FP_INFINITE":
		return fmt.Sprint(c_FP_INFINITE)
	case "FP_NAN":
		return fmt.Sprint(c_FP_NAN)
	case "SIGTERM":
		return fmt.Sprint(c_SIGTERM)
	case "SIGSEGV":
		return fmt.Sprint(c_SIGSEGV)
	case "SIGINT":
		return fmt.Sprint(c_SIGINT)
	case "SIGILL":
		return fmt.Sprint(c_SIGILL)
	case "SIGABRT":
		return fmt.Sprint(c_SIGABRT)
	case "SIGFPE":
		return fmt.Sprint(c_SIGFPE)
	case "LC_ALL":
		return fmt.Sprint(c_LC_ALL)
	case "LC_COLLATE":
		return fmt.Sprint(c_LC_COLLATE)
	case "LC_CTYPE":
		return fmt.Sprint(c_LC_CTYPE)
	case "LC_MONETARY":
		return fmt.Sprint(c_LC_MONETARY)
	case "LC_NUMERIC":
		return fmt.Sprint(c_LC_NUMERIC)
	case "LC_TIME":
		return fmt.Sprint(c_LC_TIME)
	case "MATH_ERRNO":
		return fmt.Sprint(c_MATH_ERRNO)
	case "MATH_ERREXCEPT":
		return fmt.Sprint(c_MATH_ERREXCEPT)
	case "math_errhandling":
		return fmt.Sprint(c_math_errhandling)
	case "EXIT_SUCCESS":
		return fmt.Sprint(c_EXIT_SUCCESS)
	case "EXIT_FAILURE":
		return fmt.Sprint(c_EXIT_FAILURE)
	case "true":
		return fmt.Sprint(c_true)
	case "false":
		return fmt.Sprint(c_false)
	case "ATOMIC_BOOL_LOCK_FREE":
		return fmt.Sprint(c_ATOMIC_BOOL_LOCK_FREE)
	case "ATOMIC_CHAR_LOCK_FREE":
		return fmt.Sprint(c_ATOMIC_CHAR_LOCK_FREE)
	case "ATOMIC_CHAR16_T_LOCK_FREE":
		return fmt.Sprint(c_ATOMIC_CHAR16_T_LOCK_FREE)
	case "ATOMIC_CHAR32_T_LOCK_FREE":
		return fmt.Sprint(c_ATOMIC_CHAR32_T_LOCK_FREE)
	case "ATOMIC_WCHAR_T_LOCK_FREE":
		return fmt.Sprint(c_ATOMIC_WCHAR_T_LOCK_FREE)
	case "ATOMIC_SHORT_LOCK_FREE":
		return fmt.Sprint(c_ATOMIC_SHORT_LOCK_FREE)
	case "ATOMIC_INT_LOCK_FREE":
		return fmt.Sprint(c_ATOMIC_INT_LOCK_FREE)
	case "ATOMIC_LONG_LOCK_FREE":
		return fmt.Sprint(c_ATOMIC_LONG_LOCK_FREE)
	case "ATOMIC_LLONG_LOCK_FREE":
		return fmt.Sprint(c_ATOMIC_LLONG_LOCK_FREE)
	case "ATOMIC_POINTER_LOCK_FREE":
		return fmt.Sprint(c_ATOMIC_POINTER_LOCK_FREE)
	case "EOF":
		return fmt.Sprint(c_EOF)
	case "FOPEN_MAX":
		return fmt.Sprint(c_FOPEN_MAX)
	case "FILENAME_MAX":
		return fmt.Sprint(c_FILENAME_MAX)
	case "L_tmpnam":
		return fmt.Sprint(c_L_tmpnam)
	case "TMP_MAX":
		return fmt.Sprint(c_TMP_MAX)
	case "_IOFBF":
		return fmt.Sprint(c__IOFBF)
	case "_IOLBF":
		return fmt.Sprint(c__IOLBF)
	case "_IONBF":
		return fmt.Sprint(c__IONBF)
	case "BUFSIZ":
		return fmt.Sprint(c_BUFSIZ)
	case "SEEK_SET":
		return fmt.Sprint(c_SEEK_SET)
	case "SEEK_CUR":
		return fmt.Sprint(c_SEEK_CUR)
	case "SEEK_END":
		return fmt.Sprint(c_SEEK_END)
	case "CLOCKS_PER_SEC":
		return fmt.Sprint(c_CLOCKS_PER_SEC)
	default:
		return ""
	}
}

type Error int8

func (err Error) Error() string {
	return fmt.Sprintf("error %d", uint8(err))
}
