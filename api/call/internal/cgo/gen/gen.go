package main

import (
	"bytes"
	"fmt"
	"go/format"
	"os"
	"reflect"
	"runtime"
	"strings"

	"runtime.link/api/call/internal/cgo"
)

func main() {
	file, err := os.Create("./gen_" + runtime.GOOS + "_" + runtime.GOARCH + ".go")
	if err != nil {
		panic(err)
	}
	defer file.Close()
	var buf bytes.Buffer
	cgo.Dump(&buf)
	data := buf.Bytes()
	kinds := []reflect.Kind{
		reflect.Invalid,
		reflect.Bool,
		reflect.Int,
		reflect.Int8,
		reflect.Int16,
		reflect.Int32,
		reflect.Int64,
		reflect.Uint,
		reflect.Uint8,
		reflect.Uint16,
		reflect.Uint32,
		reflect.Uint64,
		reflect.Uintptr,
		reflect.Float32,
		reflect.Float64,
		reflect.Complex64,
		reflect.Complex128,
		reflect.Array,
		reflect.Chan,
		reflect.Func,
		reflect.Interface,
		reflect.Map,
		reflect.Pointer,
		reflect.Slice,
		reflect.String,
		reflect.Struct,
		reflect.UnsafePointer,
	}
	for i := len(kinds) - 1; i >= 0; i-- {
		data = bytes.ReplaceAll(data, []byte(fmt.Sprintf("kind:0x%x", int(kinds[i]))), []byte("kind:reflect."+strings.Title(kinds[i].String())))
	}
	data = bytes.ReplaceAll(data, []byte(","), []byte(",\n"))
	data = bytes.ReplaceAll(data, []byte("{"), []byte("{\n"))
	data = bytes.ReplaceAll(data, []byte("}"), []byte(",\n}"))
	data, err = format.Source(data)
	if err != nil {
		panic(err)
	}
	fmt.Fprintln(file, "// Code generated by gen/gen.go. DO NOT EDIT.")
	fmt.Fprintln(file, "package cgo")
	fmt.Fprintln(file)
	fmt.Fprintln(file, `import "reflect"`)
	file.Write(data)
}
